pipeline{
    agent any

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '1', artifactNumToKeepStr: '1', daysToKeepStr: '5', numToKeepStr: '50'))
        // Disable concurrent builds. It will wait until the pipeline finish before start a new one
        disableConcurrentBuilds()
    }

    environment {
        // Directory with java project
        javaDir = 'jtqj'

        // sonarQube
        // Name of the sonarQube environment
        sonarEnv = "SonarQube"

        // Nexus 3
        // Maven global settings configuration ID
        globalSettingsId = 'MavenSettings'
        // Maven tool id
        mavenInstallation = 'Maven3'
    }

    stages {
        stage ('Unit Tests') {
            steps {
                dir(javaDir) {
                    withMaven(globalMavenSettingsConfig: globalSettingsId, maven: mavenInstallation) {
                        sh "mvn clean test"
                    }
                }
            }
        }

        stage ('SonarQube code analysis') {
            steps {
                script {
                    dir(javaDir) {
                        withMaven(globalMavenSettingsConfig: globalSettingsId, maven: mavenInstallation) {
                            withSonarQubeEnv(sonarEnv) {
                                sh "mvn sonar:sonar"
                            }
                        }
                        timeout(time: 1, unit: 'HOURS') {
                            def qg = waitForQualityGate() 
                            if (qg.status != 'OK') {
                                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                            }
                        }
                    }
                }
            }
        }
        
        stage ('Deliver application into Nexus') {
            steps {
                dir(javaDir) {
                    withMaven(globalMavenSettingsConfig: globalSettingsId, maven: mavenInstallation) {
                        sh "mvn deploy -Dmaven.test.skip=true"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
